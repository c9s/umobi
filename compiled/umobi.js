// Generated by CoffeeScript 1.4.0

(function() {
  return window.umobi = {
    config: {
      touchScroll: false,
      theme: 'c'
    }
  };
})();

(function() {
  umobi.button = {};
  umobi.button.all = function() {
    return u.dom.queryAll('[data-role="button"]');
  };
  umobi.button.markup = function(el) {
    var $el;
    $el = $(el);
    return $el.wrapInner("<span class=\"ui-btn ui-btn-corner-all\">\n  <span class=\"ui-btn-text\">\n  </span>\n</span>");
  };
  umobi.button.bindClassEvents = function(el) {
    var $el, cmap, theme;
    $el = $(el);
    theme = umobi.config.theme;
    cmap = {
      up: "ui-btn-up-" + theme,
      down: "ui-btn-down-" + theme,
      hover: "ui-btn-hover-" + theme
    };
    $el.addClass(cmap.up);
    $el.hover((function() {
      return u(this).removeClass([cmap.up, cmap.down]).addClass(cmap.hover);
    }), (function() {
      return u(this).removeClass([cmap.down, cmap.hover]).addClass(cmap.up);
    }));
    $el.on("tap", function(e) {
      return u(this).removeClass(cmap.hover).removeClass(cmap.up).addClass(cmap.down);
    });
    $el.on("mousedown", function(e) {
      return u(this).removeClass(cmap.hover).removeClass(cmap.up).addClass(cmap.down);
    });
    return $el.on('mouseup', function(e) {
      return u(this).removeClass(cmap.down).addClass(cmap.hover);
    });
  };
  return u.ready(function() {
    var $icon, $link, b, btn, buttons, el, iconpos, icontype, link, linkbuttons, _i, _j, _len, _len1, _ref, _ref1, _results;
    linkbuttons = u('a[data-role="button"]');
    _ref = linkbuttons.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      link = u(el);
      link.data("corners", true).data("shadow", true).data("theme", umobi.config.theme);
      link.addClass(["ui-btn", "ui-shadow", "ui-btn-corner-all"]);
      if (link.data("mini"))  
        link.addClass("ui-mini");
      if (link.data("inline"))  
        link.addClass("ui-inline");
      $link = $(el);
      $link.wrapInner("<span class=\"ui-btn-text\">\n</span>");
      $link.wrapInner("<span class=\"ui-btn-inner\">\n</span>");
      if (icontype = $link.data("icon")) {
        iconpos = $link.data("iconpos");
        if (iconpos == null)  
          iconpos = "left";
        $icon = $('<span/>');
        $icon.addClass("ui-icon icon-" + icontype);
        $icon.addClass("ui-icon-" + iconpos);
        $link.addClass("ui-btn-icon-" + iconpos);
        $link.children(0).prepend($icon); 
      }
      umobi.button.bindClassEvents($link);
    }
    buttons = u('button, input[type="button"]');
    _ref1 = buttons.all();
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      btn = _ref1[_j];
      b = u(btn);
      b.addClass(["ui-btn", "ui-btn-corner-all", "ui-shadow"]);
      if (b.data("mini"))  
        b.addClass("ui-mini");
      if (b.data("inline"))  
        b.addClass("ui-inline");
      $(btn).wrapInner("<span class=\"ui-btn-text\">\n</span>");
      $(btn).wrapInner("<span class=\"ui-btn-inner\">\n</span>");
      if (icontype = b.data("icon")) {
        iconpos = b.data("iconpos");
        if (iconpos == null)  
          iconpos = "left";
        $icon = $('<span/>');
        $icon.addClass("ui-icon icon-" + icontype);
        $icon.addClass("ui-icon-" + iconpos);
        b.addClass("ui-btn-icon-" + iconpos);
        $(btn).children(0).prepend($icon); 
      }
      _results.push(umobi.button.bindClassEvents($(btn)));
    }
    return _results;
  });
})();

(function() {
  u('body').css('overflow', 'hidden').addClass('ui-overlay-c');
  return umobi.page = {
    findAll: function() {
      return u('[data-role="page"],page');
    },
    findActive: function() {
      return u('.ui-page-active');
    },
    init: function() {
      var indexPage, pages,
        _this = this;
      $(document).trigger('pageinit');
      pages = this.findAll();
      if (!pages.get(0))  
        pages = u($("body").wrapInner("<div data-role=\"page\"></div>").children(0).get(0));
      pages.each(function(i, e) {
        return _this.create(e);
      });
      if (location.hash) {
        return this.revealByHash(location.hash); 
      } else {
        indexPage = u('#index');
        if (indexPage.get(0)) {
          return this.reveal(indexPage); 
        } else {
          return this.reveal(pages.first());
        }
      }
    },
    reveal: function(p) {
      this.findActive().removeClass("ui-page-active");
      p.addClass("ui-page-active").trigger("pagereveal");
      return $(document).trigger("pagereveal", [p]);
    },
    revealByHash: function(hash) {
      var upage;
      upage = u(hash);
      if (!upage.get(0))  
        upage = u('[data-role="page"]').first();
      return umobi.page.reveal(upage);
    },
    create: function(el) {
      var $c, $contentContainer, AdjustContentHeight, AdjustContentPadding, c, f, h, isBothFixed, resizeTimeout, upage;
      upage = u(el).addClass(["ui-page", "ui-body-" + umobi.config.theme]);
      upage.trigger("pagecreate");
      h = upage.find('[data-role="header"],header').addClass("ui-header");
      f = upage.find('[data-role="footer"],footer').addClass("ui-footer");
      c = upage.find('[data-role="content"]').addClass("ui-content");
      h.find("h1,h2,h3,h4,h5,h6").addClass("ui-title");
      isBothFixed = h.data("fixed" || f.data("fixed"));
      if (isBothFixed) {
        $c = c.jQuery();
        $c.wrap('<div class="ui-content-container"/>');
        $contentContainer = $c.parent();
        if (umobi.support.touch && umobi.config.touchScroll) {
          umobi.scroller.create(c.get(0));
          document.documentElement.style.overflow = "hidden";
          $contentContainer.addClass("ui-content-scroll"); 
        }
        if (!umobi.config.touchScroll) {
          AdjustContentPadding = function() {
            $contentContainer.css({
              "position": "absolute",
              "-webkit-overflow-scrolling": "touch",
              "overflow": "auto"
            });
            if (h.get(0))  
              $contentContainer.css("top", h.height() + "px");
            if (f.get(0))  
              return $contentContainer.css("bottom", f.height() + "px");
          };
          upage.on("pagereveal", AdjustContentPadding); 
        } else {
          AdjustContentHeight = function(e) {
            var contentBottom, contentHeight, contentTop;
            contentHeight = $(window).height();
            contentTop = h.get(0) ? h.height() : 0;
            contentBottom = f.get(0) ? f.height() : 0;
            return $contentContainer.css({
              position: "absolute",
              top: contentTop + "px",
              left: 0,
              bottom: contentBottom + "px",
              overflow: umobi.support.touch ? "hidden" : "auto"
            });
          };
          upage.on("pagereveal", AdjustContentHeight);
        } 
      }
      resizeTimeout = null;
      u(window).on("resize", function() {
        if (resizeTimeout)  
          clearTimeout(resizeTimeout);
        return resizeTimeout = setTimeout(AdjustContentHeight, 100);
      });
      if (h.attr("data-fixed"))  
        h.addClass("ui-fixed-header");
      if (f.attr("data-fixed"))  
        return f.addClass("ui-fixed-footer");
    }
  };
})();
