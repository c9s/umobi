// Generated by CoffeeScript 1.4.0
(function() {

  define(["cs!str", "cs!u.dom", "cs!umobi.core"], function(dom, umobi) {
    var USet, ensureClassArray, u;
    u = function(a) {
      if (typeof a === "object" && a instanceof USet)  
        return a;
      return new USet(a);
    };
    u.dom = window.dom;
    u.ready = function(cb) {
      if (document.readyState === "complete") {
        return setTimeout(cb); 
      } else {
        return document.addEventListener("DOMContentLoaded", cb, false);
      }
    };
    u.load = function(cb) {
      if (document.readyState === "complete") {
        return setTimeout(cb); 
      } else {
        return window.addEventListener("load", cb, false);
      }
    };
    ensureClassArray = function(c) {
      if (typeof c === "string")  
        return c.split(" ");
      if (typeof c === "function")  
        return c();
      return c;
    };
    USet = (function() {

      function USet(a) {
        if (typeof a === "string") {
          this.els = u.dom.queryAll(a); 
        } else if (typeof a === "object" && a instanceof Array) {
          this.els = a;
          this.length = a.length; 
        } else if (a instanceof NodeList) {
          this.els = a;
          this.length = a.length; 
        } else if (typeof a === "object" || a instanceof Node) {
          this.el = a; 
        } else {
          if (window.console)  
            console.error(a);
          throw new Error("u: unsupported argument");
        }
      }

      USet.prototype.size = function() {
        if (this.els)  
          return this.els.length;
        if (this.el)  
          return 1;
        return 0;
      };

      USet.prototype.get = function(i) {
        if (this.els)  
          return this.els[i];
        if (i === 0)  
          return this.el;
      };

      USet.prototype.all = function() {
        if (this.els)  
          return this.els;
        if (this.el)  
          return [this.el];
        return [];
      };

      USet.prototype.children = function(i) {
        if (i)  
          return u(this.get(i));
        if (this.els)  
          return u(this.els);
      };

      USet.prototype.first = function() {
        return this.children(0);
      };

      USet.prototype.last = function() {
        if (this.els)  
          return this.children(this.els.length > 0 ? this.els.length - 1 : 0);
      };

      /*
          addClass, toggleClass, removeClass is little different from jQuery
          which takes a string for single class or an array for multiple
          class names.
          
          As you are already using u(), you should use
          
              u('element').addClass('class1 class2'.split(' '))
          
          Or
          
              u('element').addClass('class1')
          
          Instead of
          
              u('element').addClass('class1 class2')
          
          Because the classList is faster 8 times than jQuery.addClass
          
          Performance:
          http://jsperf.com/jquery-addclass-vs-dom-classlist/4
          
          Support:
          https://developer.mozilla.org/en-US/docs/DOM/element.classList
      */


      USet.prototype.addClass = function(cls) {
        var c, el, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        if (typeof cls === "object") {
          for (_i = 0, _len = cls.length; _i < _len; _i++) {
            c = cls[_i];
            _ref = this.all();
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              el = _ref[_j];
              el.classList.add(c);
            }
          } 
        } else {
          _ref1 = this.all();
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            el = _ref1[_k];
            el.classList.add(cls);
          }
        }
        return this;
      };

      USet.prototype.toggleClass = function(cls) {
        var c, el, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        if (typeof cls === "object") {
          for (_i = 0, _len = cls.length; _i < _len; _i++) {
            c = cls[_i];
            _ref = this.all();
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              el = _ref[_j];
              el.classList.toggle(c);
            }
          } 
        } else {
          _ref1 = this.all();
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            el = _ref1[_k];
            el.classList.toggle(cls);
          }
        }
        return this;
      };

      USet.prototype.removeClass = function(cls) {
        var c, el, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        if (typeof cls === "object") {
          for (_i = 0, _len = cls.length; _i < _len; _i++) {
            c = cls[_i];
            _ref = this.all();
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              el = _ref[_j];
              el.classList.remove(c);
            }
          } 
        } else {
          _ref1 = this.all();
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            el = _ref1[_k];
            el.classList.remove(cls);
          }
        }
        return this;
      };

      USet.prototype.hasClass = function(cls) {
        var el, _i, _len, _ref;
        _ref = this.all();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          if (!el.classList.contains(cls))  
            return false;
        }
        return true;
      };

      USet.prototype.css = function(n, v) {
        if (n && v) {
          return this.each(function(i, el) {
            return el.style[n] = v;
          }); 
        } else if (typeof n === "object")  
          return this.each(function(i, el) {
            var k, val, _results;
            _results = [];
            for (k in n) {
              val = n[k];
              _results.push(el.style[k] = val);
            }
            return _results;
          });
        if (typeof n === "string" && this.el)  
          return this.el.style[n];
      };

      USet.prototype.attr = function(n, v) {
        var _ref;
        if (n && v) {
          return this.each(function(i, el) {
            return el.setAttribute(n, v);
          }); 
        } else if (typeof n === "object")  
          return this.each(function(i, el) {
            var k, val, _i, _len, _results;
            _results = [];
            for (val = _i = 0, _len = n.length; _i < _len; val = ++_i) {
              k = n[val];
              _results.push(el.setAttribute(k, val));
            }
            return _results;
          });
        if (typeof n === "string")  
          return (_ref = this.get(0)) != null ? _ref.getAttribute(n) : void 0;
      };

      USet.prototype.empty = function() {
        return this.each(function(i, el) {
          return el.innerHTML = '';
        });
      };

      USet.prototype.each = function(cb) {
        var b, els, i, len;
        els = this.all();
        if (!els)  
          return;
        i = 0;
        len = els.length;
        while (i < len) {
          b = cb.call(els[i], i, els[i]);
          if (b === false) {
            break; 
          }
          i++;
        }
        return this;
      };

      /*
          Trigger a native element
          
          @param string n event name
      */


      USet.prototype.trigger = function(n) {
        var evt;
        evt = document.createEvent("HTMLEvents");
        evt.initEvent(n, true, true);
        return this.each(function(i, el) {
          return el.dispatchEvent(evt);
        });
      };

      USet.prototype.click = function(cb) {
        return this.bind("click", cb);
      };

      USet.prototype.on = function(n, cb) {
        return this.bind(n, cb);
      };

      USet.prototype.bind = function(n, cb) {
        return this.each(function(i, el, capture) {
          return el.addEventListener(n, cb, capture);
        });
      };

      USet.prototype.parent = function() {
        var e;
        e = this.get(0);
        if (e)  
          return u(e.parentNode);
      };

      USet.prototype.find = function(sel) {
        var el, els, n, nodes, _i, _j, _len, _len1, _ref;
        els = [];
        _ref = this.all();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          nodes = u.dom.queryAll(sel, el);
          for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
            n = nodes[_j];
            els.push(n);
          }
        }
        return u(els);
      };

      USet.prototype.findone = function(sel) {
        var el, node, _i, _len, _ref;
        _ref = this.all();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          node = u.dom.query(sel, el);
          if (node)  
            return u(node);
        }
      };

      USet.prototype.siblings = function(sel) {
        if (sel)  
          return this.parent().find(sel);
        return this.parent().children();
      };

      USet.prototype.filter = function(cb) {
        var e, els, newlist, _i, _len;
        newlist = [];
        els = this.all();
        for (_i = 0, _len = els.length; _i < _len; _i++) {
          e = els[_i];
          if (cb.call(e, e))  
            newlist.push(e);
        }
        return u(newlist);
      };

      USet.prototype.next = function() {
        var e;
        e = this.get(0);
        if (e)  
          return u(e.nextSibling);
      };

      USet.prototype.prev = function() {
        var e;
        e = this.get(0);
        if (e)  
          return u(e.prevSibling);
      };

      /*
          Returns style or computed style
      */


      USet.prototype.style = function(computed, update) {
        var el;
        if (update == null)  
          update = false;
        el = this.get(0);
        if (!el)  
          return;
        if (computed) {
          if (this.cstyle && !update)  
            return this.cstyle;
          return this.cstyle = window.getComputedStyle(el); 
        }
        return el.style;
      };

      USet.prototype.data = function(n, v) {
        var datakey, el;
        el = this.get(0);
        if (el) {
          if (n && v) {
            if (typeof v === "string" || typeof v === "boolean") {
              return this.attr('data-' + n, v); 
            } else {
              console.error('not implemented yet.');
            } 
          } else if (n) {
            datakey = n.toLowerCamelCase();
            if (typeof el.dataset !== 'undefined') {
              return el.dataset[datakey]; 
            } else {
              return this.attr(n);
            } 
          } 
        }
        return this;
      };

      USet.prototype.height = function(a) {
        var el;
        if (a) {
          return this.each(function(i, e) {
            return e.style.height = parseInt(a) + 'px';
          }); 
        } else {
          el = this.get(0);
          if (el != null ? el.style.height : void 0)  
            return parseInt(el.style.height);
          return parseInt(this.style(1).height);
        }
      };

      USet.prototype.width = function(a) {
        var el;
        if (a) {
          return this.each(function(i, e) {
            return e.style.width = parseInt(a) + 'px';
          }); 
        } else {
          el = this.get(0);
          if (el != null ? el.style.width : void 0)  
            return parseInt(el.style.width);
          return parseInt(style(1).width);
        }
      };

      USet.prototype.toArray = function() {
        return this.all();
      };

      USet.prototype.jQuery = function() {
        return $(this.els || this.el);
      };

      return USet;

    })();
    return window.u = u;
  });

}).call(this);
