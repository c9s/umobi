// Generated by CoffeeScript 1.4.0
(function() {

  define(['cs!umobi.core', 'cs!umobi.page'], function() {
    (function() {
      umobi.handleHashChange = function(e) {
        return umobi.page.revealByHash(location.hash);
      };
      $(window).on('hashchange', function(e) {
        return umobi.handleHashChange(e);
      });
      return window.umobi.Navigator = (function() {

        function Navigator() {}

        Navigator.prototype.urlParseRE = /^\s*(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/;

        Navigator.prototype.getLocation = function(url) {
          var hash, uri;
          uri = url ? this.parseUrl(url) : location;
          hash = this.parseUrl(url || location.href).hash;
          hash = hash === "#" ? "" : hash;
          return uri.protocol + "//" + uri.host + uri.pathname + uri.search + hash;
        };

        Navigator.prototype.parseLocation = function() {
          return this.parseUrl(this.getLocation());
        };

        Navigator.prototype.parseUrl = function(url) {
          var data, matches;
          if ($.type(url) === "object")  
            return url;
          matches = path.urlParseRE.exec(url || "") || [];
          data = {
            href: matches[0] || "",
            hrefNoHash: matches[1] || "",
            hrefNoSearch: matches[2] || "",
            domain: matches[3] || "",
            protocol: matches[4] || "",
            doubleSlash: matches[5] || "",
            authority: matches[6] || "",
            username: matches[8] || "",
            password: matches[9] || "",
            host: matches[10] || "",
            hostname: matches[11] || "",
            port: matches[12] || "",
            pathname: matches[13] || "",
            directory: matches[14] || "",
            filename: matches[15] || "",
            search: matches[16] || "",
            hash: matches[17] || ""
          };
          return data;
        };

        Navigator.prototype.makePathAbsolute = function(relPath, absPath) {
          var absStack, d, relStack, _i, _len;
          if (relPath && relPath.charAt(0) === "/")  
            return relPath;
          relPath = relPath || "";
          absPath = absPath ? absPath.replace(/^\/|(\/[^\/]*|[^\/]+)$/g, "") : "";
          absStack = absPath ? absPath.split("/") : [];
          relStack = relPath.split("/");
          for (_i = 0, _len = relStack.length; _i < _len; _i++) {
            d = relStack[_i];
            switch (d) {
              case ".":
                1;
                break;
              case "..":
                if (absStack.length)  
                  absStack.pop();
                break;
              default:
                absStack.push(d);
            }
          }
          return "/" + absStack.join("/");
        };

        return Navigator;

      })();
    })();
  });

}).call(this);
